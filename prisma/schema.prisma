// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
    id       String  @id @default(cuid())
    avatar   String?
    name     String
    email    String  @unique
    password String
    role     Role    @default(USER)
    verified Boolean @default(false)

    token token?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name, email])
}

model token {
    id           String   @id @default(cuid())
    refreshToken String   @unique
    expiresAt    DateTime

    User   User   @relation(fields: [userId], references: [id])
    userId String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// const { PrismaClient } = require('@prisma/client');
// const prisma = new PrismaClient();
// async function deleteExpiredRefreshTokens() {
//   const now = new Date();
//   try {
//     const result = await prisma.token.deleteMany({
//       where: {
//         expiresAt: {
//           lt: now,
//         },
//       },
//     });
//     console.log(`Deleted ${result.count} expired refresh tokens`);
//   } catch (error) {
//     console.error('Error deleting expired refresh tokens:', error);
//   }
// }
// const millisecondsInADay = 86400000;

// // Schedule the deleteExpiredRefreshTokens function to run every 24 hours
// setInterval(() => {
//   console.log('Running a task to delete expired refresh tokens');
//   deleteExpiredRefreshTokens();
// }, millisecondsInADay);

// // Optionally, run the function once when the server starts
// deleteExpiredRefreshTokens();
